import { NextFunction, Request, Response } from "express";
import { ValidationError } from "joi";

import { BAD_REQUEST, getStatusText } from "http-status-codes";
import { validate } from "joi";
import { defaults, find } from "lodash";

const defaultOptions = {
    allowUnknownBody: true,
    allowUnknownCookies: true,
    allowUnknownHeaders: true,
    allowUnknownParams: true,
    allowUnknownQuery: true,
    contextRequest: false,
    status: BAD_REQUEST,
    statusText: getStatusText(BAD_REQUEST),
};

let globalOptions = {};

const unknownMap = {
    body: "allowUnknownBody",
    cookies: "allowUnknownCookies",
    headers: "allowUnknownHeaders",
    params: "allowUnknownParams",
    query: "allowUnknownQuery",
};

export function options(options) {
  if (!options) {
    globalOptions = {};
    return;
  }

  globalOptions = defaults({}, globalOptions, options);
}

export default function validatore(schema) {
    if (!schema) {
        throw new Error("Please Provide A Validation Schema!");
    }

    const options = {
        abortEarly: false,
        allowUnknown: true,
    };

    return (req: Request, res: Response, next: NextFunction) => {

        const validationErrors: ValidationError[] = [];
        const customOptions = defaults({}, schema.options || {}, globalOptions, defaultOptions);

        ["headers", "body", "query", "params", "cookies"].forEach((key) => {
            const allowUnknown = options[unknownMap[key]];
            const entireContext = customOptions.contextRequest ? req : null;
            if (schema[key]) {
                validate(req[key], schema[key], options, (errors, value) => {
                    if (!errors || errors.details.length === 0) {
                        return Object.assign(req, value);
                    }

                    validationErrors.push(errors);
                });
            }
        });

        if (validationErrors && validationErrors.length === 0) {
            return next();
        }

        return next(new ValidationError(errors, options));
    };
}
